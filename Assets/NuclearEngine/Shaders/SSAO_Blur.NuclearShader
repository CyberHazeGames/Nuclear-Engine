#SSAO Blur Nuclear Shader
[Shader]
Name = "SSAO_Blur"
Type = "RenderingEffect"
ForwardPipeline = "MainPSO"

[MainPSO]
RTVFormats = [ "TEX_FORMAT_R32_FLOAT" ]
DSVFormat = "TEX_FORMAT_UNKNOWN"
VertexShader = "VShader"
PixelShader = "PShader"
InputLayout = [ [ 0, 0, 3, "VT_FLOAT32", false ] , [ 1, 0, 2, "VT_FLOAT32", false ] ]
PrimitiveTopology = "PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"
DepthStencilDesc.DepthEnable = false
DepthStencilDesc.StencilEnable = false
RasterizerDesc.FrontCounterClockwise = true
RasterizerDesc.CullMode = "CULL_MODE_BACK"

[VShader]
EntryPoint = "main"
Path = '@NuclearAssets@/Shaders/ScreenSpace.vs.hlsl'

[PShader]
Source = '''
struct PixelInputType
{
    float4 Position : SV_POSITION;
    float2 UV : TEXCOORD0;
};

Texture2D NEDynamic_SSAO_Noise;
SamplerState NEDynamic_SSAO_Noise_sampler;

float main(PixelInputType input) : SV_TARGET
{
	float w;
	float h;
	NEDynamic_SSAO_Noise.GetDimensions(w, h);
    float2 texelSize = 1.0 / float2(w, h);
    float result = 0.0;
    for (int x = -2; x < 2; ++x) 
    {
        for (int y = -2; y < 2; ++y) 
        {
            float2 offset = float2(float(x), float(y)) * texelSize;
			result += NEDynamic_SSAO_Noise.Sample(NEDynamic_SSAO_Noise_sampler, input.UV + offset).r;
        }
    }
    return result / (4.0 * 4.0);
}
'''