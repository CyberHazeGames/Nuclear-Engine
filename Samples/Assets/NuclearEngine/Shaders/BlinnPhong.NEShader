#Blinn Phong Nuclear Shader
[Shader]
Name = "BlinnPhong"
#SupportForwardRendering = true
SupportSkinnedMeshes = true
SupportDefferedRendering = true
SupportShadows = true

ForwardPipeline = "MainPSO"
DefferedPipeline = "DefferedPSO"
GBufferPipeline = "GBufferPSO"
Variants = [ "ANIMATION" ]




[MainPSO]
RTVFormats = [ "TEX_FORMAT_RGBA8_UNORM_SRGB" ]
DSVFormat = "TEX_FORMAT_D32_FLOAT"
VertexShader = "VShader"
PixelShader = "PShader"


[DefferedPSO]
RTVFormats = [ "TEX_FORMAT_RGBA8_UNORM_SRGB" ]
DSVFormat = "TEX_FORMAT_D32_FLOAT"
VertexShader = "VShader"
PixelShader = "PShader"


[GBufferPSO]
PixelShader = "PShader"
RTVFormats = [ "TEX_FORMAT_RGBA16_FLOAT" , "TEX_FORMAT_RGBA16_FLOAT" , "TEX_FORMAT_RGBA8_UNORM" ]
DSVFormat = "TEX_FORMAT_D32_FLOAT"

			
[VShader]
EntryPoint = "main"
Path = '@NuclearAssets@/Shaders/Basic.vs.hlsl'
#Defines = 

[PShader]
Source = '''
//Definitions:
//#define NE_USE_NORMAL_MAPS
//#define NE_DIR_LIGHTS_NUM 1
//#define NE_POINT_LIGHTS_NUM 1
//#define NE_SPOT_LIGHTS_NUM 1
//#define NE_SHADOWS_ENABLED
#include "LightTypes.hlsli"
#include <CommonInput.ps.hlsl>

#ifdef NE_SHADOWS
#include <ShadowCalculations.hlsl>
#endif


#ifdef NE_DEFFERED

Texture2D NE_RT_GBuffer_Position : register(t0);
Texture2D NE_RT_GBuffer_Normal : register(t1);
Texture2D NE_RT_GBuffer_AlbedoSpec : register(t2);

SamplerState NE_RT_GBuffer_Position_sampler : register(s0);
SamplerState NE_RT_GBuffer_Normal_sampler : register(s1);
SamplerState NE_RT_GBuffer_AlbedoSpec_sampler : register(s2);

#else

Texture2D NEMat_Diffuse1 : register(t0);
Texture2D NEMat_Specular1 : register(t1);
Texture2D NEMat_Normal1 : register(t2);

SamplerState NEMat_Diffuse1_sampler : register(s0);
SamplerState NEMat_Specular1_sampler : register(s1);
SamplerState NEMat_Normal1_sampler : register(s2);

#endif

float4 DoLighting(PixelInputType input);

float4 main(PixelInputType input) : SV_TARGET
{
    return DoLighting(input);
}

//TODO: move to a global light modifier or some shit
#define Shininess 64.0f

float DoBlinnSpecular(float3 normal, float3 lightDir, float3 viewDir)
{
    float3 reflectDir = reflect(-lightDir, normal);

    return pow(max(dot(viewDir, reflectDir), 0.0f), Shininess);

    //float3 halfwayDir = normalize(lightDir + viewDir);
    //return pow(max(dot(normal, halfwayDir), 0.0f), Shininess);
}

float DoDiffuse(float3 LightDir, float3 normal)
{
    return max(dot(normal, LightDir), 0.0f);
}
float DoQuadraticAttenuation(float4 Intensity_Attenuation, float3 lightposition, float3 fragPos)
{
    float distance = length(lightposition - fragPos);
    return Intensity_Attenuation.x / (Intensity_Attenuation.y + Intensity_Attenuation.z * distance + Intensity_Attenuation.w * (distance * distance));
}
// calculates the color when using a directional light.
float3 CalcDirLight(DirLight light, float3 normal, float3 viewDir, float4 albedo)
{
    float3 lightDir = normalize(-light.Direction.xyz);

    float3 diffuse = light.Color_Intensity.xyz * DoDiffuse(lightDir, normal) * albedo.xyz;
    float3 specular = light.Color_Intensity.xyz * DoBlinnSpecular(normal, lightDir, viewDir) * albedo.w;

    diffuse *= light.Color_Intensity.w;
    specular *= light.Color_Intensity.w;

    return (diffuse + specular);
}

// calculates the color when using a point light.
float3 CalcPointLight(PointLight light, float3 normal, float3 fragPos, float3 viewDir, float4 albedo)
{
    float3 lightDir = normalize(light.Position.xyz - fragPos);

    // attenuation
    float attenuation = DoQuadraticAttenuation(light.Intensity_Attenuation, light.Position.xyz, fragPos);

    // combine results
    float3 diffuse = light.Color_FarPlane.xyz * DoDiffuse(lightDir, normal) * albedo.xyz;
    float3 specular = light.Color_FarPlane.xyz * DoBlinnSpecular(normal, lightDir, viewDir) * albedo.w;
    diffuse *= attenuation;
    specular *= attenuation;

	return (diffuse + specular);// *ModelColor;
}

// calculates the color when using a spot light.
float3 CalcSpotLight(SpotLight light, float3 normal, float3 fragPos, float3 viewDir, float4 albedo)
{
    float3 lightDir = normalize(light.Position.xyz - fragPos);

    // attenuation
    float attenuation = DoQuadraticAttenuation(light.Intensity_Attenuation, light.Position.xyz, fragPos);

    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.Direction.xyz));
    float epsilon = light.InnerCutOf_OuterCutoff.x - light.InnerCutOf_OuterCutoff.y;
    float intensity = clamp((theta - light.InnerCutOf_OuterCutoff.y) / epsilon, 0.0, 1.0);

    // combine results
    float3 diffuse = light.Color.xyz * DoDiffuse(lightDir, normal) * albedo.xyz;
    float3 specular = light.Color.xyz * DoBlinnSpecular(normal, lightDir, viewDir) * albedo.w;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;

    return (diffuse + specular);
}

float4 DoLighting(PixelInputType input)
{
    float3 result = float3(0.0f, 0.0f, 0.0f);
#ifdef NE_DEFFERED
    float3 FragPos = NE_RT_GBuffer_Position.Sample(NE_RT_GBuffer_Position_sampler, input.TexCoord).xyz;
    float3 norm = NE_RT_GBuffer_Normal.Sample(NE_RT_GBuffer_Normal_sampler, input.TexCoord).xyz;
    float4 albedo = NE_RT_GBuffer_AlbedoSpec.Sample(NE_RT_GBuffer_AlbedoSpec_sampler, input.TexCoord);
#else
    float3 FragPos = input.FragPos;

    float3 norm = NEMat_Normal1.Sample(NEMat_Normal1_sampler, input.TexCoord).xyz;
    norm = normalize(mul(norm, 2.0f) - 1.0f);
    norm = normalize(mul(norm, input.TBN));
    float4 albedo = float4(NEMat_Diffuse1.Sample(NEMat_Diffuse1_sampler, input.TexCoord).xyz, NEMat_Specular1.Sample(NEMat_Specular1_sampler, input.TexCoord).x);
#endif

    float3 viewDir = normalize(ViewPos.xyz - FragPos);

    // phase 0: ambient "diffuse" lighting
    //should be done once and not incremented...?
    float3 ambient = 0.05f * albedo.xyz;
    result += ambient;

    uint i = 0;  //used for iteriation


// phase 1: dir light
#ifdef NE_DIR_LIGHTS_NUM

#ifdef NE_MAX_DIR_CASTERS

    float dir_Shadow[NE_DIR_LIGHTS_NUM];
    for (i = 0; i < NE_DIR_LIGHTS_NUM; i++)   //initialize array
    {
        dir_Shadow[i] = 0.0f;
    }
    for (i = 0; i < NE_MAX_DIR_CASTERS; i++)   //Shadow enabled light casters first
    {
        dir_Shadow[i] = (1.0f - DirPosShadowCalculation(i, input.DirLight_FragPos[i]));
    }

    for (i = 0; i < NE_DIR_LIGHTS_NUM; i++)  //do lighting + add shadow
    {
        result += dir_Shadow[i] * CalcDirLight(DirLights[i], norm, viewDir, albedo);
    }

#else  // NO SHADOWS
    for (i = 0; i < NE_DIR_LIGHTS_NUM; i++)  //do lighting 
    {
        result += CalcDirLight(DirLights[i], norm, viewDir, albedo);
    }
#endif  //NE_MAX_DIR_CASTERS

#endif  //NE_DIR_LIGHTS_NUM

// phase 2: spot light
#ifdef NE_SPOT_LIGHTS_NUM

#ifdef NE_MAX_SPOT_CASTERS 
    float Spot_Shadow[NE_SPOT_LIGHTS_NUM];
 
    for (i = 0; i < NE_SPOT_LIGHTS_NUM; i++)   //initialize array
    {
        Spot_Shadow[i] = 0.0f;
    }
    for (i = 0; i < NE_MAX_SPOT_CASTERS; i++)   //Shadow enabled light casters first
    {
        Spot_Shadow[i] = (1.0f - SpotShadowCalculation(i, input.SpotLight_FragPos[i]));
    }
    for (i = 0; i < NE_SPOT_LIGHTS_NUM; i++)  //do lighting + add shadow
    {
        result += Spot_Shadow[i] * CalcSpotLight(SpotLights[i], norm, FragPos, viewDir, albedo);
    }
#else  //NO SHADOWS
    for (i = 0; i < NE_SPOT_LIGHTS_NUM; i++)  //do lighting
    {
        result += CalcSpotLight(SpotLights[i], norm, FragPos, viewDir, albedo);
    }
#endif //NE_MAX_SPOT_CASTERS

#endif //NE_SPOT_LIGHTS_NUM


// phase 3: point lights
#ifdef NE_POINT_LIGHTS_NUM   
#ifdef NE_MAX_OMNIDIR_CASTERS

    float point_shadow[NE_POINT_LIGHTS_NUM];
    for (i = 0; i < NE_POINT_LIGHTS_NUM; i++)   //initialize array
    {
        point_shadow[i] = 0.0f;
    }
    for (i = 0; i < NE_MAX_OMNIDIR_CASTERS; i++)   //Shadow enabled light casters first
    {
        point_shadow[i] = (1.0f - OmniDirShadowCalculation(i, FragPos, PointLights[i].Position.xyz, norm, PointLights[i].Color_FarPlane.w));
    }
    for (i = 0; i < NE_POINT_LIGHTS_NUM; i++)
    {
        result += point_shadow[i] * CalcPointLight(PointLights[i], norm, FragPos, viewDir, albedo);
    }
#else  //NO SHADOWS
    for (i = 0; i < NE_POINT_LIGHTS_NUM; i++)
    {
        result += CalcPointLight(PointLights[i], norm, FragPos, viewDir, albedo);
    }
#endif //NE_MAX_OMNIDIR_CASTERS
 
#endif  //NE_POINT_LIGHTS_NUM

   return float4(result, 1.0f);
}

'''